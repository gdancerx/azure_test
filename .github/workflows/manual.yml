# This is a basic workflow that is manually triggered

name: Manual workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Person to greet'
        # Default value if no value is explicitly provided
        default: 'World'
        # Input has to be provided for the workflow to run
        required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # env: 
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Get credentials and constants
        id: creds
        run: |
          az aks list -o table
          az acr list -o table
          echo "::set-output name=clusterName::$(az aks list --query '[].name' -o tsv | head -1)"
          echo "::set-output name=resourceGroupName::$(az aks list --query '[].resourceGroup' -o tsv | head -1)"
          echo "::set-output name=registryServer::$(az acr list --query '[].loginServer' -o tsv | head -1)"
          echo "::set-output name=registryUsername::${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}"
          echo "::set-output name=registryPassword::${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}"
          
      - name: Login to kubectl
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ steps.creds.outputs.resourceGroupName }}
          cluster-name: ${{ steps.creds.outputs.clusterName }}
          
      - name: Get secrets
        run: |
          echo -ne > secrets.env
          SECRETS+=($(az keyvault secret list --vault-name ${{ steps.creds.outputs.clusterName }}-${{ secrets.APP }} --query "[].id" -o tsv))
          for SECRET in "${SECRETS[@]}"; do
            SECRETNAME=$(echo "$SECRET" | sed 's|.*/||')
            SECRET=$(az keyvault secret show --vault-name ${{ steps.creds.outputs.clusterName }}-${{ secrets.APP }} -n $SECRETNAME --query "value" -o tsv)
            echo ${SECRETNAME}=${SECRET} >>secrets.env
          done
      
      - name: Add secrets to Kubernetes cluster
        run: |
          kubectl create secret generic ${{ secrets.APP }} --type=Opaque --from-env-file=secrets.env --dry-run -o yaml > secrets.yaml
          kubectl apply -f ./secrets.yaml
          rm secrets.env
          rm secrets.yaml
            
